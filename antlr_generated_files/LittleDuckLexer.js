// Generated from LittleDuckLexer.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,34,201,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,
1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,
1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,
1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,
18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,
1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,4,
29,165,8,29,11,29,12,29,166,1,29,1,29,1,30,1,30,4,30,173,8,30,11,30,12,30,
174,1,31,1,31,5,31,179,8,31,10,31,12,31,182,9,31,1,31,1,31,1,32,4,32,187,
8,32,11,32,12,32,188,1,33,4,33,192,8,33,11,33,12,33,193,1,33,1,33,4,33,198,
8,33,11,33,12,33,199,1,180,0,34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
67,34,1,0,3,3,0,9,10,13,13,32,32,3,0,48,57,65,90,97,122,1,0,48,57,206,0,
1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,
69,1,0,0,0,3,77,1,0,0,0,5,82,1,0,0,0,7,86,1,0,0,0,9,90,1,0,0,0,11,92,1,0,
0,0,13,94,1,0,0,0,15,96,1,0,0,0,17,100,1,0,0,0,19,106,1,0,0,0,21,108,1,0,
0,0,23,110,1,0,0,0,25,116,1,0,0,0,27,118,1,0,0,0,29,120,1,0,0,0,31,122,1,
0,0,0,33,128,1,0,0,0,35,131,1,0,0,0,37,134,1,0,0,0,39,139,1,0,0,0,41,141,
1,0,0,0,43,143,1,0,0,0,45,146,1,0,0,0,47,148,1,0,0,0,49,150,1,0,0,0,51,152,
1,0,0,0,53,154,1,0,0,0,55,159,1,0,0,0,57,161,1,0,0,0,59,164,1,0,0,0,61,170,
1,0,0,0,63,176,1,0,0,0,65,186,1,0,0,0,67,191,1,0,0,0,69,70,5,112,0,0,70,
71,5,114,0,0,71,72,5,111,0,0,72,73,5,103,0,0,73,74,5,114,0,0,74,75,5,97,
0,0,75,76,5,109,0,0,76,2,1,0,0,0,77,78,5,109,0,0,78,79,5,97,0,0,79,80,5,
105,0,0,80,81,5,110,0,0,81,4,1,0,0,0,82,83,5,101,0,0,83,84,5,110,0,0,84,
85,5,100,0,0,85,6,1,0,0,0,86,87,5,118,0,0,87,88,5,97,0,0,88,89,5,114,0,0,
89,8,1,0,0,0,90,91,5,58,0,0,91,10,1,0,0,0,92,93,5,59,0,0,93,12,1,0,0,0,94,
95,5,44,0,0,95,14,1,0,0,0,96,97,5,105,0,0,97,98,5,110,0,0,98,99,5,116,0,
0,99,16,1,0,0,0,100,101,5,102,0,0,101,102,5,108,0,0,102,103,5,111,0,0,103,
104,5,97,0,0,104,105,5,116,0,0,105,18,1,0,0,0,106,107,5,123,0,0,107,20,1,
0,0,0,108,109,5,125,0,0,109,22,1,0,0,0,110,111,5,112,0,0,111,112,5,114,0,
0,112,113,5,105,0,0,113,114,5,110,0,0,114,115,5,116,0,0,115,24,1,0,0,0,116,
117,5,40,0,0,117,26,1,0,0,0,118,119,5,41,0,0,119,28,1,0,0,0,120,121,5,61,
0,0,121,30,1,0,0,0,122,123,5,119,0,0,123,124,5,104,0,0,124,125,5,105,0,0,
125,126,5,108,0,0,126,127,5,101,0,0,127,32,1,0,0,0,128,129,5,100,0,0,129,
130,5,111,0,0,130,34,1,0,0,0,131,132,5,105,0,0,132,133,5,102,0,0,133,36,
1,0,0,0,134,135,5,101,0,0,135,136,5,108,0,0,136,137,5,115,0,0,137,138,5,
101,0,0,138,38,1,0,0,0,139,140,5,62,0,0,140,40,1,0,0,0,141,142,5,60,0,0,
142,42,1,0,0,0,143,144,5,33,0,0,144,145,5,61,0,0,145,44,1,0,0,0,146,147,
5,43,0,0,147,46,1,0,0,0,148,149,5,45,0,0,149,48,1,0,0,0,150,151,5,42,0,0,
151,50,1,0,0,0,152,153,5,47,0,0,153,52,1,0,0,0,154,155,5,118,0,0,155,156,
5,111,0,0,156,157,5,105,0,0,157,158,5,100,0,0,158,54,1,0,0,0,159,160,5,91,
0,0,160,56,1,0,0,0,161,162,5,93,0,0,162,58,1,0,0,0,163,165,7,0,0,0,164,163,
1,0,0,0,165,166,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,168,1,0,0,0,
168,169,6,29,0,0,169,60,1,0,0,0,170,172,5,36,0,0,171,173,7,1,0,0,172,171,
1,0,0,0,173,174,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,62,1,0,0,0,176,
180,5,34,0,0,177,179,9,0,0,0,178,177,1,0,0,0,179,182,1,0,0,0,180,181,1,0,
0,0,180,178,1,0,0,0,181,183,1,0,0,0,182,180,1,0,0,0,183,184,5,34,0,0,184,
64,1,0,0,0,185,187,7,2,0,0,186,185,1,0,0,0,187,188,1,0,0,0,188,186,1,0,0,
0,188,189,1,0,0,0,189,66,1,0,0,0,190,192,7,2,0,0,191,190,1,0,0,0,192,193,
1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,195,1,0,0,0,195,197,5,46,0,0,
196,198,7,2,0,0,197,196,1,0,0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,200,
1,0,0,0,200,68,1,0,0,0,7,0,166,174,180,188,193,199,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class LittleDuckLexer extends antlr4.Lexer {

    static grammarFileName = "LittleDuckLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'program'", "'main'", "'end'", "'var'", 
                         "':'", "';'", "','", "'int'", "'float'", "'{'", 
                         "'}'", "'print'", "'('", "')'", "'='", "'while'", 
                         "'do'", "'if'", "'else'", "'>'", "'<'", "'!='", 
                         "'+'", "'-'", "'*'", "'/'", "'void'", "'['", "']'" ];
	static symbolicNames = [ null, "PROGRAM", "MAIN", "END", "VAR", "COLON", 
                          "SEMICOLON", "COMMA", "INT", "FLOAT", "CURLY_BRACKET_OPEN", 
                          "CURLY_BRACKET_CLOSE", "PRINT", "PARENTHESIS_OPEN", 
                          "PARENTHESIS_CLOSE", "EQUAL", "WHILE", "DO", "IF", 
                          "ELSE", "GREATHER_THAN", "LESS_THAN", "NOT_EQUAL", 
                          "PLUS", "MINUS", "ASTERISK", "SLASH", "VOID", 
                          "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", 
                          "WS", "ID", "CTE_STRING", "CTE_INT", "CTE_FLOAT" ];
	static ruleNames = [ "PROGRAM", "MAIN", "END", "VAR", "COLON", "SEMICOLON", 
                      "COMMA", "INT", "FLOAT", "CURLY_BRACKET_OPEN", "CURLY_BRACKET_CLOSE", 
                      "PRINT", "PARENTHESIS_OPEN", "PARENTHESIS_CLOSE", 
                      "EQUAL", "WHILE", "DO", "IF", "ELSE", "GREATHER_THAN", 
                      "LESS_THAN", "NOT_EQUAL", "PLUS", "MINUS", "ASTERISK", 
                      "SLASH", "VOID", "SQUARE_BRACKET_OPEN", "SQUARE_BRACKET_CLOSE", 
                      "WS", "ID", "CTE_STRING", "CTE_INT", "CTE_FLOAT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

LittleDuckLexer.EOF = antlr4.Token.EOF;
LittleDuckLexer.PROGRAM = 1;
LittleDuckLexer.MAIN = 2;
LittleDuckLexer.END = 3;
LittleDuckLexer.VAR = 4;
LittleDuckLexer.COLON = 5;
LittleDuckLexer.SEMICOLON = 6;
LittleDuckLexer.COMMA = 7;
LittleDuckLexer.INT = 8;
LittleDuckLexer.FLOAT = 9;
LittleDuckLexer.CURLY_BRACKET_OPEN = 10;
LittleDuckLexer.CURLY_BRACKET_CLOSE = 11;
LittleDuckLexer.PRINT = 12;
LittleDuckLexer.PARENTHESIS_OPEN = 13;
LittleDuckLexer.PARENTHESIS_CLOSE = 14;
LittleDuckLexer.EQUAL = 15;
LittleDuckLexer.WHILE = 16;
LittleDuckLexer.DO = 17;
LittleDuckLexer.IF = 18;
LittleDuckLexer.ELSE = 19;
LittleDuckLexer.GREATHER_THAN = 20;
LittleDuckLexer.LESS_THAN = 21;
LittleDuckLexer.NOT_EQUAL = 22;
LittleDuckLexer.PLUS = 23;
LittleDuckLexer.MINUS = 24;
LittleDuckLexer.ASTERISK = 25;
LittleDuckLexer.SLASH = 26;
LittleDuckLexer.VOID = 27;
LittleDuckLexer.SQUARE_BRACKET_OPEN = 28;
LittleDuckLexer.SQUARE_BRACKET_CLOSE = 29;
LittleDuckLexer.WS = 30;
LittleDuckLexer.ID = 31;
LittleDuckLexer.CTE_STRING = 32;
LittleDuckLexer.CTE_INT = 33;
LittleDuckLexer.CTE_FLOAT = 34;



